{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/translate/i18n.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","react_i18next__WEBPACK_IMPORTED_MODULE_2__","_components_seo__WEBPACK_IMPORTED_MODULE_3__","NotFoundPage","t","useTranslation","a","createElement","id","title","className","to","d","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","_ref","staticQueryData","data","query","render","finalData","Fragment","props","children","Consumer","m","module","exports","require","default","i18n","use","initReactI18next","init","resources","en","translations","jsonEN","by","jsonBY","ru","jsonRU","lng","fallbackLng","debug","ns","defaultNS","interpolation","escapeValue","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json","SEO","description","lang","meta","site","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","siteMetadata","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps"],"mappings":"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","file":"component---src-pages-404-js-94f1488865caa942b423.js","sourcesContent":["import React, { Fragment } from 'react';\nimport { Link } from 'gatsby';\nimport { useTranslation } from 'react-i18next';\nimport SEO from '../components/seo';\nimport '../components/translate/i18n';\nimport '../components/style/404Styles.css';\n\nconst NotFoundPage = () => {\n  const { t } = useTranslation();\n  return (\n    <div id=\"main404\">\n      <h1>404</h1>\n      <SEO title=\"404: Not found\" />\n      <h3>{t('error404')}</h3>\n      <Fragment>\n        <h4>{t('description404')}</h4>\n        <p className=\"intro\">{t('intro')}</p>\n      </Fragment>\n      <Link className=\"btn-primary\" to=\"/\">Go back to the homepage</Link>\n    </div>\n  );\n};\n\nexport default NotFoundPage;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport jsonEN from '../../assets/i18n/en.json';\nimport jsonBY from '../../assets/i18n/by.json';\nimport jsonRU from '../../assets/i18n/ru.json';\n\nfunction getLanguage() {\n\n  const lng = window.location.pathname.split('/')[1];\n  console.log(`DETECTED: ${lng}`);\n  return lng || 'ru';\n}\n\ni18n\n  // .use(LanguageDetector) // use to set basic language of user's browser language\n  .use(initReactI18next)\n  .init({\n    // we init with resources\n    resources: {\n      en: {\n        translations: jsonEN,\n      },\n      by: {\n        translations: jsonBY,\n      },\n      ru: {\n        translations: jsonRU,\n      },\n    },\n    lng: 'ru',\n    fallbackLng: 'ru',\n    debug: false,\n\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    // keySeparator: false, // we use content as keys\n\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Helmet from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nfunction SEO({\n  description, lang, meta, title,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `,\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:title',\n          content: title,\n        },\n        {\n          property: 'og:description',\n          content: metaDescription,\n        },\n        {\n          property: 'og:type',\n          content: 'website',\n        },\n        {\n          name: 'twitter:card',\n          content: 'summary',\n        },\n        {\n          name: 'twitter:creator',\n          content: site.siteMetadata.author,\n        },\n        {\n          name: 'twitter:title',\n          content: title,\n        },\n        {\n          name: 'twitter:description',\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  lang: 'en',\n  meta: [],\n  description: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n"],"sourceRoot":""}